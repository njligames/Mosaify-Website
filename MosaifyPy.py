# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.2.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
import platform 
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    if platform.uname().system == "Darwin":
        from . import _MosaifyPy_Darwin
else:
    if platform.uname().system == "Darwin":
        import _MosaifyPy_Darwin

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class ImageFileLoader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def load(filename):
        return _MosaifyPy.ImageFileLoader_load(filename)

    @staticmethod
    def write(filename, img):
        return _MosaifyPy.ImageFileLoader_write(filename, img)

    def __init__(self):
        _MosaifyPy.ImageFileLoader_swiginit(self, _MosaifyPy.new_ImageFileLoader())
    __swig_destroy__ = _MosaifyPy.delete_ImageFileLoader

# Register ImageFileLoader in _MosaifyPy:
_MosaifyPy.ImageFileLoader_swigregister(ImageFileLoader)
class Mosaify(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _MosaifyPy.Mosaify_swiginit(self, _MosaifyPy.new_Mosaify())
    __swig_destroy__ = _MosaifyPy.delete_Mosaify

    def setTileSize(self, tileSize):
        return _MosaifyPy.Mosaify_setTileSize(self, tileSize)

    def getTileSize(self):
        return _MosaifyPy.Mosaify_getTileSize(self)

    def addTileImage(self, width, height, components, data, filepath, id):
        return _MosaifyPy.Mosaify_addTileImage(self, width, height, components, data, filepath, id)

    def removeTileImage(self, id):
        return _MosaifyPy.Mosaify_removeTileImage(self, id)

    def hasTileImage(self, id):
        return _MosaifyPy.Mosaify_hasTileImage(self, id)

    def updateTileImage(self, width, height, components, data, filepath, id):
        return _MosaifyPy.Mosaify_updateTileImage(self, width, height, components, data, filepath, id)

    def generate(self, width, height, components, data):
        return _MosaifyPy.Mosaify_generate(self, width, height, components, data)

    def getMosaicImage(self):
        return _MosaifyPy.Mosaify_getMosaicImage(self)

    def getMosaicMap(self):
        return _MosaifyPy.Mosaify_getMosaicMap(self)

# Register Mosaify in _MosaifyPy:
_MosaifyPy.Mosaify_swigregister(Mosaify)

