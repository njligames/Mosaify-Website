# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.2.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _MosaifyPy_Darwin
else:
    import _MosaifyPy_Darwin

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class ImageFileLoader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def load(filename):
        return _MosaifyPy_Darwin.ImageFileLoader_load(filename)

    @staticmethod
    def write(filename, img):
        return _MosaifyPy_Darwin.ImageFileLoader_write(filename, img)

    def __init__(self):
        _MosaifyPy_Darwin.ImageFileLoader_swiginit(self, _MosaifyPy_Darwin.new_ImageFileLoader())
    __swig_destroy__ = _MosaifyPy_Darwin.delete_ImageFileLoader

# Register ImageFileLoader in _MosaifyPy_Darwin:
_MosaifyPy_Darwin.ImageFileLoader_swigregister(ImageFileLoader)
class Mosaify(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getMaxThreads(self):
        return _MosaifyPy_Darwin.Mosaify_getMaxThreads(self)

    def __init__(self):
        _MosaifyPy_Darwin.Mosaify_swiginit(self, _MosaifyPy_Darwin.new_Mosaify())
    __swig_destroy__ = _MosaifyPy_Darwin.delete_Mosaify

    def getMaxWidth(self):
        return _MosaifyPy_Darwin.Mosaify_getMaxWidth(self)

    def getMaxHeight(self):
        return _MosaifyPy_Darwin.Mosaify_getMaxHeight(self)

    def setTileSize(self, tileSize):
        return _MosaifyPy_Darwin.Mosaify_setTileSize(self, tileSize)

    def getTileSize(self):
        return _MosaifyPy_Darwin.Mosaify_getTileSize(self)

    def addTileImage(self, width, height, components, data, filepath, id):
        return _MosaifyPy_Darwin.Mosaify_addTileImage(self, width, height, components, data, filepath, id)

    def removeTileImage(self, id):
        return _MosaifyPy_Darwin.Mosaify_removeTileImage(self, id)

    def hasTileImage(self, id):
        return _MosaifyPy_Darwin.Mosaify_hasTileImage(self, id)

    def getTileImage(self, id, img):
        return _MosaifyPy_Darwin.Mosaify_getTileImage(self, id, img)

    def updateTileImage(self, width, height, components, data, filepath, id):
        return _MosaifyPy_Darwin.Mosaify_updateTileImage(self, width, height, components, data, filepath, id)

    def generate(self, width, height, components, data):
        return _MosaifyPy_Darwin.Mosaify_generate(self, width, height, components, data)

    def getMosaicImage(self, img):
        return _MosaifyPy_Darwin.Mosaify_getMosaicImage(self, img)

    def getMosaicJsonArray(self):
        return _MosaifyPy_Darwin.Mosaify_getMosaicJsonArray(self)

    def getMosaicMap(self, *args):
        return _MosaifyPy_Darwin.Mosaify_getMosaicMap(self, *args)

# Register Mosaify in _MosaifyPy_Darwin:
_MosaifyPy_Darwin.Mosaify_swigregister(Mosaify)
class Image(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _MosaifyPy_Darwin.delete_Image

    def __init__(self, *args):
        _MosaifyPy_Darwin.Image_swiginit(self, _MosaifyPy_Darwin.new_Image(*args))

    def setPixel(self, *args):
        return _MosaifyPy_Darwin.Image_setPixel(self, *args)

    def getPixel(self, *args):
        return _MosaifyPy_Darwin.Image_getPixel(self, *args)

    def setPixels(self, *args):
        return _MosaifyPy_Darwin.Image_setPixels(self, *args)

    def getNumberOfComponents(self):
        return _MosaifyPy_Darwin.Image_getNumberOfComponents(self)

    def getWidth(self):
        return _MosaifyPy_Darwin.Image_getWidth(self)

    def getHeight(self):
        return _MosaifyPy_Darwin.Image_getHeight(self)

    def getFilename(self):
        return _MosaifyPy_Darwin.Image_getFilename(self)

    def getBytesPerPixel(self):
        return _MosaifyPy_Darwin.Image_getBytesPerPixel(self)

    def getDataPtr(self):
        return _MosaifyPy_Darwin.Image_getDataPtr(self)

    def getDataSize(self):
        return _MosaifyPy_Darwin.Image_getDataSize(self)

    def generate(self, *args):
        return _MosaifyPy_Darwin.Image_generate(self, *args)

    def drawLine(self, *args):
        return _MosaifyPy_Darwin.Image_drawLine(self, *args)

    def blur(self):
        return _MosaifyPy_Darwin.Image_blur(self)

    def setAlpha(self, *args):
        return _MosaifyPy_Darwin.Image_setAlpha(self, *args)

    def hasAlpha(self):
        return _MosaifyPy_Darwin.Image_hasAlpha(self)

    def preMultiplyAlpha(self):
        return _MosaifyPy_Darwin.Image_preMultiplyAlpha(self)

    def flip(self):
        return _MosaifyPy_Darwin.Image_flip(self)

    def rotate(self):
        return _MosaifyPy_Darwin.Image_rotate(self)

    def resize(self, *args):
        return _MosaifyPy_Darwin.Image_resize(self, *args)

    def clip(self, x, y, width, height):
        return _MosaifyPy_Darwin.Image_clip(self, x, y, width, height)

    def isWidthHeightPowerOf2(self):
        return _MosaifyPy_Darwin.Image_isWidthHeightPowerOf2(self)

    def copyData(self, dataPtr, width, height, components, filename):
        return _MosaifyPy_Darwin.Image_copyData(self, dataPtr, width, height, components, filename)

    def setId(self, _id):
        return _MosaifyPy_Darwin.Image_setId(self, _id)

    def getId(self):
        return _MosaifyPy_Darwin.Image_getId(self)

# Register Image in _MosaifyPy_Darwin:
_MosaifyPy_Darwin.Image_swigregister(Image)

def getMosaicPath(mosaify):
    return _MosaifyPy_Darwin.getMosaicPath(mosaify)

def getMosaicPreviewPath(mosaify):
    return _MosaifyPy_Darwin.getMosaicPreviewPath(mosaify)

def getMosaicTilePreviewPath(mosaify, _id):
    return _MosaifyPy_Darwin.getMosaicTilePreviewPath(mosaify, _id)

